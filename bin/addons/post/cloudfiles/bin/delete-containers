#!/usr/bin/env python
"""
Gets outdated containers
"""

import os
import datetime
import pyrax

_PARSER_FORMAT = "%Y-%m-%dT%H:%M:%S.%f"


def get_domain():
    """
    Fetch the domain
    """
    domain_name = os.getenv("RACKSPACE_CDN_ALIAS_DOMAIN")
    if domain_name:
        for domain_obj in pyrax.cloud_dns.get_domain_iterator():
            if domain_obj == domain_name:
                return domain_obj
    return None


def delete_container_links(container, retain):
    """
    Delete links on the container
    """
    domain = get_domain()
    if domain:
        for record in pyrax.cloud_dns.get_record_iterator(domain):
            if record.type == "CNAME" and record.data == container.cdn_uri:
                if retain is not None:
                    print("Re-link %s" % record.name)
                    record.update(data=retain)
                else:
                    print("Unlinking %s" % record.name)
                    record.delete()


def get_container_last_modified(container):
    """
    Get the last modified datetime for a container
    """
    objects = container.get_objects(limit=1)
    if len(objects):
        return datetime.datetime.strptime(objects[0].last_modified,
                                          _PARSER_FORMAT)
    return None


def get_outdated_containers(prefix, num_to_keep=2):
    """
    Generates all a list of all containers matching a certain prefix, except
    the last "<num_to_keep>" ones.
    """
    most_recent = []

    for container_name in pyrax.cloudfiles.list_containers():
        if container_name.startswith(prefix):
            container = pyrax.cloudfiles.get_container(container_name)
            last_modified = get_container_last_modified(container)

            if last_modified:
                most_recent.append((last_modified, container))

                most_recent.sort()
                most_recent.reverse()

                if len(most_recent) > num_to_keep:
                    yield most_recent.pop()


if __name__ == "__main__":
    identity_type = "rackspace"
    user = os.getenv("RACKSPACE_USERNAME")
    api_key = os.getenv("RACKSPACE_API_KEY")
    container_prefix = os.getenv("RACKSPACE_CDN_CONTAINER_STATIC_PREFIX")
    keep_num = int(os.getenv("RACKSPACE_CDN_CONTAINER_STATIC_KEEP_NUM"))
    max_age = int(os.getenv("RACKSPACE_CDN_CONTAINER_STATIC_MIN_AGE"))
    retain_static_cdn_cname = os.getenv("RACKSPACE_CDN_ALIAS_STATIC_RETAIN")
    static_alias = os.getenv("RACKSPACE_CDN_ALIAS_STATIC")
    must_be_older_than = (datetime.datetime.now() -
                          datetime.timedelta(seconds=max_age))

    if retain_static_cdn_cname and static_alias:
        retain_static_cdn_cname = static_alias
    else:
        retain_static_cdn_cname = None

    pyrax.set_setting("identity_type", identity_type)
    pyrax.set_credentials(user, api_key)

    for age, container in get_outdated_containers(container_prefix, keep_num):
        if age < must_be_older_than:
            print "Deleting container \"%s\"." % container.name
            try:
                delete_container_links(container, retain_static_cdn_cname)
                container.delete_all_objects()
                container.delete()
            except pyrax.exceptions.ClientException:
                print ("Could not delete %s" % container.name)
        else:
            print "Container \"%s\" too young, retaining" % container.name
